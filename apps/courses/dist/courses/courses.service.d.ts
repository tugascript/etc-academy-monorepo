import { EntityRepository } from '@mikro-orm/postgresql';
import { CommonService } from '../common';
import { LocalMessageType } from '../common/entities/gql';
import { IAccessUser, IPaginated } from '../common/interfaces';
import { UploaderService } from '../uploader';
import { FilterCoursesDto } from './dtos/filter-courses.dto';
import { UpdateCourseDescriptionDto } from './dtos/update-course-description.dto';
import { UpdateCourseNameDto } from './dtos/update-course-name.dto';
import { UpdateCoursePictureDto } from './dtos/update-course-picture.dto';
import { UpdateCourseTypeDto } from './dtos/update-course-type.dto';
import { CourseEntity } from './entities/course.entity';
import { CreateCourseInput } from './inputs/create-course.input';
export declare class CoursesService {
    private readonly coursesRepository;
    private readonly commonService;
    private readonly uploaderService;
    constructor(coursesRepository: EntityRepository<CourseEntity>, commonService: CommonService, uploaderService: UploaderService);
    createCourse(user: IAccessUser, { institutionId, name, courseType, description, picture, }: CreateCourseInput): Promise<CourseEntity>;
    updateCourseName(user: IAccessUser, { name, courseId }: UpdateCourseNameDto): Promise<CourseEntity>;
    updateCourseDescription(user: IAccessUser, { description, courseId }: UpdateCourseDescriptionDto): Promise<CourseEntity>;
    updateCoursePicture(user: IAccessUser, { picture, courseId }: UpdateCoursePictureDto): Promise<CourseEntity>;
    updateCourseType(user: IAccessUser, { courseType, courseId }: UpdateCourseTypeDto): Promise<CourseEntity>;
    deleteCourse(userId: number, courseId: number): Promise<LocalMessageType>;
    courseById(user: IAccessUser, courseId: number): Promise<CourseEntity>;
    courseBySlug(user: IAccessUser, slug: string): Promise<CourseEntity>;
    filterCourses(user: IAccessUser, { institutionId, search, cursor, order, first, after }: FilterCoursesDto): Promise<IPaginated<CourseEntity>>;
    private findCourseById;
    private checkAdmin;
    private checkCourseExistence;
}
