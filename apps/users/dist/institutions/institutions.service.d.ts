import { EntityRepository } from '@mikro-orm/postgresql';
import { AddressesService } from '../addresses/addresses.service';
import { CommonService } from '../common';
import { SearchDto } from '../common/dtos';
import { LocalMessageType } from '../common/entities/gql';
import { IPaginated } from '../common/interfaces';
import { ProfilesService } from '../profiles/profiles.service';
import { UploaderService } from '../uploader';
import { SearchInstitutionsDto } from './dtos/search-institutions.dto';
import { UpdateInstitutionDescriptionDto } from './dtos/update-institution-description.dto';
import { UpdateInstitutionNameDto } from './dtos/update-institution-name.dto';
import { UpdateInstitutionPictureDto } from './dtos/update-institution-picture.dto';
import { InstitutionEntity } from './entities/institution.entity';
import { CreateInstitutionInput } from './inputs/create-institution.input';
export declare class InstitutionsService {
    private readonly institutionsRepository;
    private readonly commonService;
    private readonly uploaderService;
    private readonly profilesService;
    private readonly addressesService;
    constructor(institutionsRepository: EntityRepository<InstitutionEntity>, commonService: CommonService, uploaderService: UploaderService, profilesService: ProfilesService, addressesService: AddressesService);
    createInstitution(userId: number, { name, institutionType, picture, description, vatNumber, address, }: CreateInstitutionInput): Promise<InstitutionEntity>;
    updateInstitutionName(userId: number, { institutionId, name }: UpdateInstitutionNameDto): Promise<InstitutionEntity>;
    updateInstitutionDescription(userId: number, { institutionId, description }: UpdateInstitutionDescriptionDto): Promise<InstitutionEntity>;
    updateInstitutionPicture(userId: number, { institutionId, picture }: UpdateInstitutionPictureDto): Promise<InstitutionEntity>;
    deleteInstitution(userId: number, institutionId: number): Promise<LocalMessageType>;
    institutionById(institutionId: number): Promise<InstitutionEntity>;
    institutionBySlug(slug: string): Promise<InstitutionEntity>;
    searchInstitutions({ institutionType, country, search, cursor, order, first, after, }: SearchInstitutionsDto): Promise<IPaginated<InstitutionEntity>>;
    ownersInstitutions(userId: number): Promise<InstitutionEntity[]>;
    usersInstitutions(userId: number, { search, cursor, order, first, after }: SearchDto): Promise<IPaginated<InstitutionEntity>>;
    private checkExistence;
    private generateSlug;
    private checkProfile;
}
