import { EntityRepository } from '@mikro-orm/postgresql';
import { ConfigService } from '@nestjs/config';
import { CommonService } from 'src/common';
import { LocalMessageType } from 'src/common/entities/gql';
import { RequestStatusEnum } from 'src/common/enums';
import { IPaginated } from 'src/common/interfaces';
import { UploaderService } from 'src/uploader';
import { EmailService } from '../email/email.service';
import { UsersService } from '../users/users.service';
import { FilterProfileRequestsDto } from './dtos/filter-profile-requests.dto';
import { FilterProfilesDto } from './dtos/filter-profiles.dto';
import { UpdateProfilePictureDto } from './dtos/update-profile-picture.dto';
import { UpdateProfileRoleDto } from './dtos/update-profile-role.dto';
import { UpdateProfileStatusDto } from './dtos/update-profile-status.dto';
import { InvitationEntity } from './entities/invitation.entity';
import { ProfileRequestEntity } from './entities/profile-request.entity';
import { ProfileEntity } from './entities/profile.entity';
import { CreateProfileInput } from './inputs/create-profile.input';
import { RespondToInvitationInput } from './inputs/respond-to-invitation.input';
import { RespondToProfileRequestInput } from './inputs/respond-to-profile-request.input';
export declare class ProfilesService {
    private readonly profilesRepository;
    private readonly invitationsRepository;
    private readonly profileRequestsRepository;
    private readonly commonService;
    private readonly configService;
    private readonly uploaderService;
    private readonly usersService;
    private readonly emailService;
    private readonly frontendUrl;
    private readonly invitationPassword;
    constructor(profilesRepository: EntityRepository<ProfileEntity>, invitationsRepository: EntityRepository<InvitationEntity>, profileRequestsRepository: EntityRepository<ProfileRequestEntity>, commonService: CommonService, configService: ConfigService, uploaderService: UploaderService, usersService: UsersService, emailService: EmailService);
    createInitialProfile(userId: number, institutionId: number): Promise<ProfileEntity>;
    updateProfilePicture(userId: number, { picture, profileId, institutionId }: UpdateProfilePictureDto): Promise<ProfileEntity>;
    updateProfileStatus(userId: number, { status, profileId, institutionId }: UpdateProfileStatusDto): Promise<ProfileEntity>;
    updateProfileRole(userId: number, { role, profileId, institutionId }: UpdateProfileRoleDto): Promise<ProfileEntity>;
    sendProfileRequest(userId: number, { institutionId, userEmail, role, userName, status }: CreateProfileInput): Promise<LocalMessageType>;
    respondToInvitation(userId: number, { token, response }: RespondToInvitationInput): Promise<LocalMessageType>;
    acceptRejectedInvitation(userId: number, invitationId: number): Promise<LocalMessageType>;
    respondToProfileRequest(userId: number, { response, requestId }: RespondToProfileRequestInput): Promise<LocalMessageType>;
    acceptRejectedProfileRequest(userId: number, requestId: number): Promise<LocalMessageType>;
    invitationByToken(token: string): Promise<InvitationEntity>;
    filterProfileRequests(userId: number, { status, userType, first, after }: FilterProfileRequestsDto): Promise<IPaginated<ProfileRequestEntity>>;
    profileById(institutionId: number, profileId: number): Promise<ProfileEntity>;
    profileBySlug(institutionId: number, slug: string): Promise<ProfileEntity>;
    profileByRelations(userId: number, institutionId: number, populate?: boolean): Promise<ProfileEntity>;
    checkProfileExistence(userId: number, institutionId: number): Promise<void>;
    filterProfiles(userId: number, { institutionId, search, order, cursor, first, after }: FilterProfilesDto): Promise<IPaginated<ProfileEntity>>;
    userProfiles(userId: number): Promise<ProfileEntity[]>;
    userProfileById(profileId: number): Promise<ProfileEntity>;
    requestById(userId: number, requestId: number, populate?: boolean): Promise<ProfileRequestEntity>;
    invitationsByUser(userId: number, status: RequestStatusEnum): Promise<InvitationEntity[]>;
    private invitationById;
    private acceptInvitation;
    private acceptRequest;
    private checkStatusAndRole;
    private generateInvitationLink;
    private verifyInvitationToken;
}
