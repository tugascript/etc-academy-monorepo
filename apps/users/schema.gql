# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type Address {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  address: String!
  address2: String
  addressType: AddressType!
  city: String!
  country: CountryCodes!
  state: String!
  zipCode: String!
  institution: Institution!
  author: User!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

enum AddressType {
  LOCATION
  BILLING
}

enum CountryCodes {
  AF
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  HR
  CU
  CW
  CY
  CZ
  CI
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RO
  RU
  RW
  RE
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
  AX
}

type InstitutionProfile {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  slug: String!
  role: ProfileRole!
  status: ProfileStatus!
  picture: String
  institution: Institution!
  user: User!
}

enum ProfileRole {
  ADMIN
  STAFF
  TEACHER
  STUDENT
}

enum ProfileStatus {
  STAFF
  ENROLLED
  STUDYING
  GRADUATED
}

type Institution {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  name: String!
  institutionType: InstitutionType!
  slug: String!
  picture: String!
  description: String
  vatNumber: String!
  owner: User!
  addresses: [Address!]!
  profiles(order: QueryOrder = ASC, first: Int = 10): PaginatedProfiles!
}

enum InstitutionType {
  PERSONAL
  SCHOOL
  TUTOR
  UNIVERSITY
  COLLEGE
  OTHER
}

enum QueryOrder {
  ASC
  DESC
}

type User {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  name: String!
  username: String!
  email: String
  picture: String
  twoFactor: Boolean
  lastLogin: Timestamp!
  lastOnline: Timestamp!
  profiles(order: QueryOrder = ASC, first: Int = 10): PaginatedProfiles!
  institutions(order: QueryOrder = ASC, first: Int = 10): PaginatedInstitutions!
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Message {
  id: ID!
  message: String!
}

type InstitutionEntityPageEdge {
  cursor: String!
  node: Institution!
}

type PaginatedInstitutions {
  previousCount: Int!
  currentCount: Int!
  edges: [InstitutionEntityPageEdge!]!
  pageInfo: PageInfo!
}

type ProfileEntityPageEdge {
  cursor: String!
  node: InstitutionProfile!
}

type PaginatedProfiles {
  previousCount: Int!
  currentCount: Int!
  edges: [ProfileEntityPageEdge!]!
  pageInfo: PageInfo!
}

type UserEntityPageEdge {
  cursor: String!
  node: User!
}

type PaginatedUsers {
  previousCount: Int!
  currentCount: Int!
  edges: [UserEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Invitation {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  email: String!
  status: RequestStatus!
  profileRole: ProfileRole!
  profileStatus: ProfileStatus!
  institution: Institution!
  sender: User!
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type ProfileRequest {
  id: ID!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  status: RequestStatus!
  profileStatus: ProfileStatus!
  profileRole: ProfileRole!
  institution: Institution!
  recipient: User!
  sender: User!
}

type ProfileRequestEntityPageEdge {
  cursor: String!
  node: ProfileRequest!
}

type PaginatedProfileRequests {
  previousCount: Int!
  currentCount: Int!
  edges: [ProfileRequestEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Query {
  me: User!
  userByUsername(username: String!): User!
  userById(userId: Int!): User!
  filterUsers(cursor: QueryCursor = DATE, order: QueryOrder = DESC, after: String, first: Int = 10, search: String): PaginatedUsers!
  institutionById(institutionId: Int!): Institution!
  institutionBySlug(slug: String!): Institution!
  searchInstitutions(search: String, cursor: QueryCursor = DATE, order: QueryOrder = DESC, after: String, first: Int = 10, institutionType: InstitutionType, country: CountryCodes): PaginatedInstitutions!
  ownersInstitutions: [Institution!]!
  usersInstitutions(cursor: QueryCursor = DATE, order: QueryOrder = DESC, after: String, first: Int = 10, search: String): PaginatedInstitutions!
  profileById(institutionId: Int!, profileId: Int!): InstitutionProfile!
  profileBySlug(institutionId: Int!, slug: String!): InstitutionProfile!
  profileByRelations(institutionId: Int!, userId: Int!): InstitutionProfile!
  filterProfiles(search: String, cursor: QueryCursor = DATE, order: QueryOrder = DESC, after: String, first: Int = 10, institutionId: Int!): PaginatedProfiles!
  filterProfileRequests(after: String, first: Int = 10, status: RequestStatus, userType: RequestUser!): PaginatedProfileRequests!
  invitationByToken(token: String!): Invitation!
  invitationsByUser(status: RequestStatus!): [Invitation!]!
  addressesByInstitution(institutionId: Int!): [Address!]!
  addressesByType(institutionId: Int!, addressType: AddressType!): [Address!]!
}

enum QueryCursor {
  DATE
  ALPHA
}

enum RequestUser {
  SENDER
  RECIPIENT
}

type Mutation {
  updateUsersPicture(picture: Upload!): User!
  toggleTwoFactorAuth: User!
  updateEmail(email: String!): User!
  deleteAccount(password: String!): Message!
  createInstitution(input: CreateInstitutionInput!): Institution!
  updateInstitutionName(institutionId: Int!, name: String!): Institution!
  updateInstitutionDescription(institutionId: Int!, description: String!): Institution!
  updateInstitutionPicture(institutionId: Int!, picture: Upload!): Institution!
  deleteInstitution(institutionId: Int!): Message!
  updateProfilePicture(profileId: Int!, institutionId: Int!, picture: Upload!): InstitutionProfile!
  updateProfileStatus(profileId: Int!, institutionId: Int!, status: ProfileStatus!): InstitutionProfile!
  updateProfileRole(profileId: Int!, institutionId: Int!, role: ProfileRole!): InstitutionProfile!
  sendProfileRequest(input: CreateProfileInput!): Message!
  respondToProfileRequest(input: RespondToProfileRequestInput!): Message!
  acceptRejectedProfileRequest(requestId: Int!): Message!
  respondToInvitation(input: RespondToInvitationInput!): Message!
  acceptRejectedInvitation(invitationId: Int!): Message!
  createAddress(input: CreateAddressInput!): Address!
  updateAddress(input: UpdateAddressInput!): Address!
  deleteAddress(institutionId: Int!, addressId: Int!): Message!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateInstitutionInput {
  name: String!
  institutionType: InstitutionType!
  picture: Upload!
  description: String
  vatNumber: String!
  address: InitialAddressInput!
}

input InitialAddressInput {
  address: String!
  address2: String
  city: String!
  country: CountryCodes!
  state: String!
  zipCode: String!
}

input CreateProfileInput {
  institutionId: Int!
  userEmail: String!
  userName: String!
  role: ProfileRole!
  status: ProfileStatus!
}

input RespondToProfileRequestInput {
  requestId: Int!
  response: RequestStatus!
}

input RespondToInvitationInput {
  token: String!
  response: RequestStatus!
}

input CreateAddressInput {
  institutionId: Int!
  addressType: AddressType!
  address: String!
  address2: String
  city: String!
  country: CountryCodes!
  state: String!
  zipCode: String!
}

input UpdateAddressInput {
  institutionId: Int!
  addressId: Int!
  address: String
  address2: String
  city: String
  country: CountryCodes
  state: String
  zipCode: String
}

scalar link__Import